; args: none

_unit = player
_dlg = createDialog "OptionsDialog"
[IDD_OptionsDialog]call funcFixDialogTitleColor

;//ctrlShow [IDC_DEFAULT, false] ;// do not hide. this must be shown in order for it's default action to work

? ( UnitSwitchAllowed == 0 ): ctrlShow[IDC_BTN_SWITCH,false]
? ( UnitSwitchAllowed == 1 ): ctrlShow[IDC_BTN_SWITCH,true]                                  
? ( player != (leader group player) ): ctrlShow[IDC_BTN_TRANSFER_MONEY, false]; ctrlShow[IDC_BTN_DISB, false]                                
? ( TimeLimit == 0): ctrlShow[IDC_BTN_EXTENSION, false]
? ( TimeLimit == 0): ctrlShow[IDC_BTN_EXTENSION2, false]

? (!IAMADMIN): ctrlEnable [IDC_BTN_CLEAN, false]; ctrlShow [IDC_BTN_CLEAN, false]; ctrlEnable [IDC_BTN_KILL, false]; ctrlShow [IDC_BTN_KILL, false]; ctrlEnable [IDC_BTN_DEBUGSTATS, false]; ctrlShow [IDC_BTN_DEBUGSTATS, false];
							  
btnLeaderboard = false
btnDestruction = false
btnDisband = false
btnTeamSwitch = false
btnGive = false
btnRequest = false
btnUpgrade = false
btnBuyUnits = false
btnShowStats = false
btnUnitCam = false
btnSatCam = false
btnCommandAI = false
btnTransfer = false
btnInfo = false
btnSurrender = false
btnExtension = false
btnExtension2 = false
btnClean = false
btnKill = false
btnDebugStats = false

_surrState = 0;

btnVDUp = false
btnVDDown = false
btnGridUp = false
btnGridDown = false

_groups = groupMatrix select playerSideIndex
_groupsName = groupNameMatrix select playerSideIndex
_groupsMoney = groupMoneyMatrix select playerSideIndex

_groupCommander = (groupCommander select playerSideIndex)

? (playerSideIndex == siWest): _incomeRatio = pvPlayerIncomeRatioWest 
? (playerSideIndex == siEast): _incomeRatio = pvPlayerIncomeRatioEast

; AMOUNTS
{ _id = lbAdd [IDC_LB_TRANSFER_AMOUNT, format["%1", _x] ]; lbSetValue [IDC_LB_TRANSFER_AMOUNT, _id, _x]; if (500==_x) then { lbSetCurSel [IDC_LB_TRANSFER_AMOUNT, _id] } } foreach [1,10,50,100,200,500,1000,2000,5000,10000,20000]

; PLAYER INCOME
{ _id = lbAdd [IDC_CB_PLAYERINCOME, format["%1%2", 100*_x, "%"] ]; lbSetValue [IDC_CB_PLAYERINCOME, _id, 100*_x]; if (_incomeRatio==_x) then { lbSetCurSel [IDC_CB_PLAYERINCOME, _id] } } foreach [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1]

; AI MARKERS GROUP
_texts = []
_index = 0
{ _texts set [_index, [playerSideIndex,_index] call funcGetGroupName]; _index=_index+1 } foreach _groups
lbClear IDC_CB_AIMARKERS
{ lbAdd [IDC_CB_AIMARKERS, _x];  } foreach _texts
lbAdd [IDC_CB_AIMARKERS, "All"]
lbSetCurSel [IDC_CB_AIMARKERS, giMarkersAI]


; TRANSFER COMMANDER
_idc = IDC_CB_COMMANDER
lbClear _idc
_index = 0; { _id = lbAdd [_idc, [playerSideIndex,_index] call funcGetGroupName]; lbSetValue[_idc, _id, _index]; if (_x == _groupCommander) then { lbSetCurSel [_idc, _index] }; _index=_index+1 } foreach _groups

_respawnObject = pvRespawnObjectAiWest
? (playerSideIndex == siEast): _respawnObject = pvRespawnObjectAiEast
_index = 0
_count = count structsRespawn
_respawnObjects = []
_currentAiRespawn = -1
? (alive mhq): _respawnObjects = [mhq]; _posInfo = (getPos mhq) call funcCalcTownDirDistFromPos; _textPos = format ["%1 %2 %3", _posInfo select 0, _posInfo select 1, _posInfo select 2]; _id = lbAdd [IDC_CB_AIRESPAWN, format ["MHQ - %1", _textPos]]; if (_respawnObject == mhq) then {lbSetCurSel [IDC_CB_AIRESPAWN, _id]; _currentAiRespawn = _id }
#CheckNextStructType
	_type = structsRespawn select _index
	_structs = [playerSideIndex, _type] call funcGetWorkingStructures
	
	_name = (structDefs select _type) select sdName
	{ _posInfo = (getPos _x) call funcCalcTownDirDistFromPos; _textPos = format ["%1 %2 %3", _posInfo select 0, _posInfo select 1, _posInfo select 2]; _id = lbAdd [IDC_CB_AIRESPAWN, format ["%1 - %2", _name, _textPos]]; if (_respawnObject == _x) then {lbSetCurSel [IDC_CB_AIRESPAWN, _id]; _currentAiRespawn = _id } } foreach _structs
	_respawnObjects = _respawnObjects + _structs
	_index = _index + 1
	? (_index < _count): goto "CheckNextStructType"

#Update

? !(dialog): Exit
? !(alive _unit): Exit

_groupsMoney = groupMoneyMatrix select playerSideIndex
_groupCommander = (groupCommander select playerSideIndex)

; MONEY
_money = _groupsMoney select playerGroupIndex
_moneySide = 0
_index = 0
{ _moneySide = _moneySide + (_groupsMoney select _index); _index=_index+1 } foreach _groups
ctrlSetText [IDC_TEXT_MONEY, format["$ You/Side: %1/%2", _money, _moneySide]]

; DISABLE stuff for NON-commanders
? (playerGroup != _groupCommander ):  ctrlEnable [IDC_CB_AIRESPAWN, false]; ctrlEnable [IDC_CB_PLAYERINCOME, false]; ctrlEnable [IDC_LB_UPGRADES, true]; ctrlShow [IDC_BTN_UPGRADE, false]; ctrlShow[IDC_BTN_SURRENDER, false]; ctrlShow[IDC_BTN_EXTENSION, false]; ctrlShow[IDC_BTN_EXTENSION2, false]; ctrlShow[IDC_BTN_DESTRUCTION, false]
? (playerGroup != _groupCommander && !(!(isPlayer (leader _groupCommander)) && IAMADMIN)): ctrlEnable [IDC_CB_COMMANDER, false]; ctrlShow [IDC_BTN_COMMANDERTRANSFER, false];																																																																																																	 
																																																																																																	 
; SCORE
_score = [playerSideIndex, playerGroupIndex] call funcCalcScore
_rank = [playerSideIndex, playerGroupIndex] call funcCalcRank
ctrlSetText [IDC_TEXT_SCORE, format["Score (Pos): %1 (%2/%3)", _score, _rank select 0, _rank select 1]]

; PLAYER INCOME RATIO
_incomeRatio = [pvPlayerIncomeRatioWest, pvPlayerIncomeRatioEast] select (playerSideIndex == siEast)
_selectedIncome = (lbValue [IDC_CB_PLAYERINCOME, lbCurSel IDC_CB_PLAYERINCOME])/100
? ((ctrlEnabled IDC_CB_PLAYERINCOME) && _incomeRatio != _selectedIncome): if (playerSideIndex==siWest) then {pvPlayerIncomeRatioWest=_selectedIncome;PublicVariable "pvPlayerIncomeRatioWest"} else {pvPlayerIncomeRatioEast=_selectedIncome;PublicVariable "pvPlayerIncomeRatioEast"}
_incomeRatio = [pvPlayerIncomeRatioWest, pvPlayerIncomeRatioEast] select (playerSideIndex == siEast)
? (_incomeRatio != _selectedIncome): lbSetCurSel[IDC_CB_PLAYERINCOME, 10*_incomeRatio]

; TOWNS
_townCount = count towns
_towns = 0
_income = 0

{ if ((_x select 3) == playerSideIndex) then { _towns=_towns+1; _income=_income+((_x select 2)*TownIncomeFactor) } } foreach towns
ctrlSetText [IDC_TEXT_TOWNS, format["Towns: %1 of %2", _towns, _townCount]]

? (IncomeLimit > 0 && _income > IncomeLimit) : _income = IncomeLimit             
             
; INCOME
_players = count ((groupMatrix select playerSideIndex) - [groupCommander select playerSideIndex])
_incomePlayer = 0

? (_players > 0): _incomePlayer = _income*(1-_incomeRatio)/_players; _incomePlayer = _incomePlayer - (_incomePlayer % 1)
_incomeCommander = _income - _incomePlayer*_players
ctrlSetText [IDC_TEXT_INCOME, format["Income You/Side: %1/%2", [_incomePlayer, _incomeCommander] select (playerGroup == (groupCommander select playerSideIndex)), _income]]

; Server FPS
ctrlSetText [IDC_TEXT_FPS, format["AFPS/SFPS/Vehs/Units/Grps/Dead: (%1/%2/%3/%4/%5/%6)", round(pvFPS), round(pvSFPS), count(vehicles), count(allUnits), count(allGroups), count(allDead)]]

; VD and GridSize
ctrlSetText [IDC_TEXT_PLAYERVD, format["%1m", playerViewDistance]]             
ctrlSetText [IDC_TEXT_SERVERVD, format["%1m", serverViewDistance]]
ctrlSetText [IDC_TEXT_VD, format["%1m", viewDistance]]
ctrlSetText [IDC_TEXT_GRIDSIZE, format["%1", (GridSizeTexts select TerrainGrid)]]
             
; GROUPS
_texts = []
_index = 0
{ _composition = [_x] call funcGetGroupComposition; _texts set [_index, format["(%3) %1 $%2 %4 %5", [playerSideIndex,_index] call funcGetGroupName, _groupsMoney select _index, count units _x, _composition, (leader _x) getVariable ["FPS", ""]] ]; _index=_index+1 } foreach _groups
lbClear IDC_LB_TRANSFER_TARGET
{ lbAdd [IDC_LB_TRANSFER_TARGET, _x];  } foreach _texts

; DISBAND
_units = units player
_units = _units - [player]
_texts = []
_index = 0
_indexAI = 2
{ while { format["%1:%2", playerGroup, _indexAI] != format["%1", _x] && _indexAI < 13} do { _indexAI=_indexAI+1 }; _texts set [_index, format["%1%2%3%4", [_indexAI, _x] select (_indexAI==13), ["", format[", In Vehicle %1:%2", assignedVehicleRole _x, [typeOf vehicle _x] call funcGetDisplayName]] select (_x != vehicle _x), [", No legs", ""] select (canStand _x), ["", ", Bad aim"] select (handsHit _x)] ]; _index=_index+1 } foreach _units
lbClear IDC_LB_UNITS
{ lbAdd [IDC_LB_UNITS, _x] } foreach _texts

; AI MARKERS GROUP
giMarkersAI = lbCurSel IDC_CB_AIMARKERS

; AI RESPAWN POS
? (_currentAiRespawn != (lbCurSel IDC_CB_AIRESPAWN)): _currentAiRespawn = (lbCurSel IDC_CB_AIRESPAWN); call compile format["pvRespawnObjectAi%1 = (_respawnObjects select _currentAiRespawn); PublicVariable ""pvRespawnObjectAi%1""", sideNames select playerSideIndex]

; UPGRADES
_idc = IDC_LB_UPGRADES
_index = 0
_upgMatrix = upgMatrix select playerSideIndex
lbClear _idc
{ _id=lbAdd [_idc, format["%1 $%2 %3min", _x select 0, _x select 1, _x select 2] ]; lbSetPicture[_idc, _id, format["images\upgrade_%1_%2.paa", _x select 4, _x select 3]]; _index=_index+1} foreach _upgMatrix

; SURRENDER

? (_surrState > 0 ): [IDD_OptionsDialog, IDC_BTN_SURRENDER, "Really?"] call funcSetButtonText
? (_surrState - time < 0 ): _surrState = 0; [IDD_OptionsDialog, IDC_BTN_SURRENDER, "Surrender"] call funcSetButtonText

? ( timeLimit - time > (extensionTime select 0) ): [IDD_OptionsDialog, IDC_BTN_EXTENSION, "Not yet avail."] call funcSetButtonText; ctrlEnable[IDC_BTN_EXTENSION,false]
? ( timeLimit - time <= (extensionTime select 0) && ((pvExtension select playerSideIndex) select 0) == 0): [IDD_OptionsDialog, IDC_BTN_EXTENSION, format["Time +%1 min", round((extensionTime select 0)/60)]] call funcSetButtonText; ctrlEnable[IDC_BTN_EXTENSION,true]
? ( timeLimit - time <= (extensionTime select 0) && ((pvExtension select playerSideIndex) select 0) > 0): [IDD_OptionsDialog, IDC_BTN_EXTENSION, format["Wait ...", round((extensionTime select 0)/60)]] call funcSetButtonText; ctrlEnable[IDC_BTN_EXTENSION, false]

? ( timeLimit - time > (extensionTime select 1) ): [IDD_OptionsDialog, IDC_BTN_EXTENSION2, "Not yet avail."] call funcSetButtonText; ctrlEnable[IDC_BTN_EXTENSION2,false]
? ( timeLimit - time <= (extensionTime select 1) && ((pvExtension select playerSideIndex) select 0) == 0): [IDD_OptionsDialog, IDC_BTN_EXTENSION2, format["Time +%1 min", round((extensionTime select 1)/60)]] call funcSetButtonText; ctrlEnable[IDC_BTN_EXTENSION2,true]
? ( timeLimit - time <= (extensionTime select 1) && ((pvExtension select playerSideIndex) select 0) > 0): [IDD_OptionsDialog, IDC_BTN_EXTENSION2, format["Wait ...", round((extensionTime select 1)/60)]] call funcSetButtonText; ctrlEnable[IDC_BTN_EXTENSION2, false]
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  
? (btnGive): btnGive=false; goto "GiveMoney"
? (btnRequest): btnRequest=false; goto "RequestMoney"
? (btnDisband): btnDisband=false; goto "DisbandUnit"
? (btnTeamSwitch): btnTeamSwitch=false; goto "TeamSwitch"
? (btnBuyUnits): btnBuyUnits=false; goto "BuyUnits"
? (btnShowStats): btnShowStats=false; goto "ShowStats"
? (btnUnitCam): btnUnitCam=false; goto "UnitCam"
? (btnSatCam): btnSatCam=false; goto "SatCam"
? (btnUpgrade): btnUpgrade=false; goto "Upgrade"
? (btnLeaderboard): btnLeaderboard=false; goto "Leaderboard"
? (btnDestruction): btnLeaderboard=false; goto "Destruction"
? (btnCommandAI): btnCommandAI=false; goto "CommandAI"
? (btnTransfer): btnTransfer=false; goto "TransferCommand"
? (btnInfo): btnInfo = false; _nul = [true] execVM "Player\DisplayGameInfo.sqf"; closeDialog 0; Exit

? (btnVDUp): btnVDUp = false; goto "VDUp"
? (btnVDDown): btnVDDown = false; goto "VDDown"
? (btnGridUp): btnGridUp = false; goto "GridUp"
? (btnGridDown): btnGridDown = false; goto "GridDown"

? (btnSurrender): btnSurrender = false; goto "Surrender"
? (btnExtension): btnExtension = false; pvExtension set [playerSideIndex, [time,extensionTime select 0]]; publicVariable "pvExtension"
? (btnExtension2): btnExtension2 = false; pvExtension set [playerSideIndex, [time,extensionTime select 1]]; publicVariable "pvExtension"

? (btnClean): btnClean = false; pvCleanKill = 1; publicVariable "pvCleanKill"
? (btnKill): btnKill = false; pvCleanKill = 2; publicVariable "pvCleanKill"
? (btnDebugStats): btnDebugStats = false; goto "DebugStats"

~0.2
goto "Update"

#Surrender
 ? (_surrState == 0): _surrState = time + 5; goto "Update"
 pvGameOver = [3,siEnemy select playerSideIndex]
 PublicVariable "pvGameOver"
 goto "Update"

#VDUp
 ? (playerViewDistance >= maxViewDistance): ["Already at Server Maximum!", true, false, htGeneral, false] call funcHint; goto "Update"
 playerViewDistance = playerViewDistance + 250
 goto "Update"

#VDDown
 ? (playerViewDistance <= 250): ["Already at Minimum!", true, false, htGeneral, false] call funcHint; goto "Update"
 playerViewDistance = playerViewDistance - 250
 goto "Update"

#GridUp 
 ? (TerrainGrid >= count(GridSizeValues)-1): ["Already at Maximum!", true, false, htGeneral, false] call funcHint; goto "Update"
 TerrainGrid = TerrainGrid + 1
 setTerrainGrid (GridSizeValues select TerrainGrid)
 goto "Update"
 
#GridDown 
 ? (TerrainGrid <= minTerrainGrid): ["Already at Server Minimum!", true, false, htGeneral, false] call funcHint; goto "Update"
 TerrainGrid = TerrainGrid - 1
 setTerrainGrid (GridSizeValues select TerrainGrid)
 goto "Update"

 
#GiveMoney
	_index = lbCurSel IDC_LB_TRANSFER_TARGET
	? (_index == -1): ["No Group Selected", true, false, htGeneral, false] call funcHint; goto "Update"
	_group = _groups select _index
	? (playerGroup == _group): ["You are trying to give money to yourself", true, false, htGeneral, false] call funcHint; goto "Update"	
	_amount = lbValue [IDC_LB_TRANSFER_AMOUNT, lbCurSel IDC_LB_TRANSFER_AMOUNT]
	[_amount, _index] execVM "Player\SendMoneyGive.sqf"
	goto "Update"

#RequestMoney
	_index = lbCurSel IDC_LB_TRANSFER_TARGET
	? (_index == -1): ["No Group Selected", true, false, htGeneral, false] call funcHint; goto "Update"
	_amount = lbValue [IDC_LB_TRANSFER_AMOUNT, lbCurSel IDC_LB_TRANSFER_AMOUNT]
	[_index, _amount] execVM "Player\RequestMoney.sqf"
	goto "Update"
	
#DisbandUnit
	_index = lbCurSel IDC_LB_UNITS
	? (_index == -1): ["No Unit Selected", true, false, htGeneral, false] call funcHint; goto "Update"
	_ai = _units select _index
	? !(isNull _ai) && (alive _ai) && (local _ai): _ai setDamage 1
	goto "Update"

#TeamSwitch
	? ( UnitSwitchAllowed == 0 ): ["Unit Switch disabled!", true, false, htGeneral, false] call funcHint; goto "Update"
	_controlCenters = [playerSideIndex, stComm] call funcGetWorkingStructures
	? ((count _controlCenters) == 0): ["No Working Comm Center", true, false, htGeneral, false] call funcHint; goto "Update"
	_index = lbCurSel IDC_LB_UNITS
	? (vehicle player != player): player groupChat "You must not be in a vehicle"; goto "Update"
	? (_index == -1): ["No Unit Selected", true, false, htGeneral, false] call funcHint; goto "Update"

	_ai = _units select _index
	
	? !([_ai] call funcCheckUnitSwitch): ["Not Allowed", true, false, htGeneral, false] call funcHint; goto "Update"
	
	?(not(alive _ai)):["Unit Just died", true, false, htGeneral, false] call funcHint; goto "Update"
  _vehicle = vehicle _ai
  ?(_vehicle == _ai): goto "DisbandUnitNoVehicle"

  _seat = 0
  ?(driver _vehicle == _ai): _seat = 1
  ?(gunner _vehicle == _ai): _seat = 2
  ?(commander _vehicle == _ai): _seat = 3
  ?(_seat == 0 && _ai in crew _vehicle): _seat = 4
  
	? !(isPlayer _ai): _ai setDamage 1
	~2

  ?(_seat == 1): player moveInDriver _vehicle 
  ?(_seat == 2): player moveInGunner _vehicle
  ?(_seat == 3): player moveInCommander _vehicle
  ?(_seat == 4): player moveInCargo _vehicle
	goto "Update"

  #DisbandUnitNoVehicle
	? !(isPlayer _ai): _ai setDamage 1
	~1
	_spawn = getPos _ai	
    player setPos _spawn
	goto "Update"

#Upgrade
	_index = lbCurSel IDC_LB_UPGRADES
	? (_index == -1): ["No Upgrade Selected", true, false, htGeneral, false] call funcHint; goto "Update"

	_controlCenters = [playerSideIndex, stComm] call funcGetWorkingStructures
	? ((count _controlCenters) == 0): ["No Working Comm Center", true, false, htGeneral, false] call funcHint; goto "Update"

	_cost = ((upgMatrix select playerSideIndex) select _index) select 1
	? (_money < _cost): ["Not Enough Cash", true, false, htGeneral, false] call funcHint; goto "Update"

	_tgCount = 0;
	{ if ( !(_forEachIndex in RegularUpgrades) && ((_x select 3) > 0 || (_x select 4) > 1)) then { _tgCount=_tgCount+1; };}forEach (upgMatrix select playerSideIndex);
	if ( !(_index in RegularUpgrades) && (((upgMatrix select playerSideIndex) select _index) select 4 <= 1 ) && _tgCount >= MaxTownGroups) then { hint "Towngroup limit reached!"; goto "Update"; };
	
	[_index] execVM "Player\SendUpgrade.sqf"
	goto "Update"

#BuyUnits
	_controlCenters = [playerSideIndex, stComm] call funcGetWorkingStructures
	? ((count _controlCenters) == 0): ["No Working Comm Center", true, false, htGeneral, false] call funcHint; goto "Update"
	
	closeDialog 0
	~0.1
	_nul = [objNull, 0, true] spawn scriptOpenBuyUnitsMenu
	Exit

#Leaderboard
	closeDialog 0
	~0.1
	_nul = [true] execVM "Player\OpenLeaderboardDialog.sqf"
	exit
	
#Destruction
	closeDialog 0
	~0.1
	_nul = [true] exec "Player\OpenDestructionDialog.sqs"
	exit
	
#ShowStats
	closeDialog 0
	~0.1
  _StatsSide = playerSideIndex
  
	_nul = [_StatsSide, true] execVM "Player\OpenStatsDialog.sqf";
	Exit

#UnitCam
	_controlCenters = [playerSideIndex, stComm] call funcGetWorkingStructures
	? ((count _controlCenters) == 0): ["No Working Comm Center", true, false, htGeneral, false] call funcHint; goto "Update"

	? (2 != ((upgMatrix select playerSideIndex) select upgUnitCam) select 3): ["Not available yet\n(not upgraded)", true, false, htGeneral, false] call funcHint; goto "Update"

	closeDialog 0
	~0.1
	[lastCamUnit,objnull, true] exec "Player\OpenUnitCamDialog.sqs"
	Exit

#SatCam
	_controlCenters = [playerSideIndex, stComm] call funcGetWorkingStructures
	? ((count _controlCenters) == 0): ["No Working Comm Center", true, false, htGeneral, false] call funcHint; goto "Update"

	? (2 != ((upgMatrix select playerSideIndex) select upgSatCam) select 3): ["Not available yet\n(not upgraded)", true, false, htGeneral, false] call funcHint; goto "Update"
	? (SatCamPrice < 0) : ["SatCam disabled", true, false, htGeneral, false] call funcHint; goto "Update"

	closeDialog 0
	~0.1
	[true] exec "Player\OpenSatCamDialog.sqs"
	Exit

#CommandAI
	closeDialog 0
	~0.1
	[true] exec "Player\Dialog AIGroupOrders.sqs"
	exit

#TransferCommand
	_idc = IDC_CB_COMMANDER
	_gi = lbValue [_idc, lbCurSel _idc]
    _group = (groupMatrix select playerSideIndex) select _gi
	? (_group == _groupCommander): goto "Update"	
	pvCO = [_gi,playerSideIndex] 
	_nul = [pvCO] execVM "Server\MsgTransferCommand.sqf"
	PublicVariable "pvCO"
	goto "Update"

#DebugStats
	closeDialog 0
	~0.1
	_nul = [] execVM "Player\OpenDebugStatsDialog.sqf" 
	exit